A-5

Questions :

Q1.  Do you notice that each usage of local variable as an operand uses a suffix that can be tracked to it's 
     assignment? Why do some variables have a suffix `(D)'?
Ans :
  i. In .ssa file, each usage of local variable as an operand uses a suffix that can be tracked to it's 
     assignment.
 ii. D means missing defination i.e, the variables which are declared but not initialized have a suffix "D".

Q2.  Find the point in the CFG in which the paths of the two assignments to variable `a' and `b' merge. You 
     will notice that PHI statements have been introduced. Can you guess the syntax of the PHI statements?
Ans :
  i. After the end of if-else statements in the CFG, the paths of 2 assignments to variables a and b will 
     merge, where the PHI statements introduced. 
 ii. We canâ€™t say which one among a_7, b_8 or a_5, b_6 will be used during execution. Its not possible to
     predict which one among them will be taken at runtime. For that SSA creates a new versions a_1 and b_2 
     which is assigned the result of merging a_7 a_5 and b_8 b_6. The PHI node means that one of the operands
     is to be taken and it doesn't know which is to be taken.
iii. Syntax of PHI statements is probably as :
     # vari_i = PHI <vari_i(x), vari_j(y), vari_k(z), ...>
     Here i, j, k being the different name of variables. and x, y, z refer to the number of basic blocks(bb).
     There will be a vari_i(x) for each preceding bb from which control flow can enter the current bb.

Q3.  Can you think of an example in which a PHI node merges more than two versions of a variable?
Ans :
  i. This will happen if we use else-if ladder or switch statement in the source code then there will be more    
     than 2 versions of a variable created, then the PHI node will merge more than 2 versions of a variable.
     eg. # a_1 = PHI <a_3(3), a_5(4), a_7(5)